25  50  1  10 25 5

me - 5
25  50  1   10 25
dad - 25 r
25  50  1   10 
me - 10
dad - 25
me - 50
dad - 1

OPT(i, j) = max(min(OPT(i+2, j), OPT(i+1, j-1)) + vi, min(OPT(i+1, j-1), OPT(i, j-2)) + vj) 
if i == j
	OPT(i, j) = vi
if j == (i+1)
    OPT(i, j) = max(vi, vj)
OPT(i+1, j) = min(OPT(i+2, j), OPT(i+1, j-1))
OPT(i, j-1) = min(OPT(i+1, j-1), OPT(i, j-2))

FindMaxSum
	Array M[1..n][1..n]
	For i = 1..n
	    M[i][i] = v_i
	EndFor
	For i = 2..n
        M[i][i+1] = max(v_i, v_(i+1))
    EndFor
    For gap = 2..n
    	For i = 1,j = gap; j <= n; ++i, ++j
    	    x, y, z = 0
    	    if (i+2 <= j)
    	        x = M[i+2][j]
    	    EndIf
    	    if (i+1 <= j-1)
    	        y = M[i+1][j-1]
    	    EndIf
    	    if (i <= j-2)
    	        z = M[i][j-2]
    	    EndIf
            M[i][j] = max(min(x, y) + vi, min(y, z) + vj)
        EndFor
    EndFor
    Return M[1][n]



1 5 10 25 50

63 - 50 10 1 1 1

113 - 50 50 10 1 1 1

OPT(n) = min(1 + OPT(n-v_i))

FindMinAmount
	Array M[1..C]
	For i = 1..C
	    minimum = 0
		For j = 1..n
            If (i-v_j >= 0)
            	If minimum > (1 + M[i-v_j])
					minimum = 1 + M[i-v_j]
            	EndIf
            EndIf
        EndFor
        M[i] = minimum
    EndFor
    Return M[C]

Correctness:

Lemma: FindMinAmount will always find the minimum amount of coins needed to reach an amount C

Base Case: n = 0
When n = 0, meaning when there are $0 to consider, the total amount of coins needed is 0 since 0 coins makes up $0. This algorithm is correct since it immediately returns 0 since there is no amount of money to iterator though.

Induction hypothesis: 
Assuming FindMinAmount returns the minimum amount of coins for money k. 
We will prove FindMinAmount will return the minimum amount of coins for money k+1.

Induction Proof: 
With the money k+1, this algorithm will return the minimum amount of coins needed to reach k+1 since it will determine all previous values of coins from 1 to k. Then, the algorithm will determine if it is able to use less coins if possible for k+1 than for k. If so, the algorithm will return the minimum, thus proving this algorithm is correct




K = 3
0 1 2 3 2 1 0 1 3 

3 2 0 1 1 
1 2 3 0 

3 3 3 3 3

3 3 3 
3 3 

OPT(n) = OPT(n-1) + v_n - avg <= K

avg = 7
OPT(1) = 0 + 3 - 7 <= 3
S1 = 3
S2 = 
OPT(2) = 3 + 3 - 7 <= 3
S1 = 3 3
S2 =
OPT(3) = 6 + 3 - 7 <= 3
S1 = 3 3 3
OPT(4) = 9 + 3 - 7 <= 3
S1 = 3 3 3
S2 = 3
OPT(5) = 9 + 3 - 7 <= 3
S1 = 3 3 3
S2 = 3 3

OPT(n) = OPT(n-1) + v_n - avg <= K
K = 3
0 1 2 3 2 1 0 1 3 

avg = 6
OPT(1) = 0 + 0 - 6 <= 3
S1 = 0
OPT(2) = 0 + 1 - 6 <= 3
S1 = 0 1
OPT(3) = 1 + 2 - 6 <= 3
S1 = 0 1 2
OPT(4) = 3 + 3 - 6 <= 3
S1 = 0 1 2 3
OPT(5) = 6 + 2 - 6 <= 3
S1 = 0 1 2 3 2

OPT(n, avg) = OPT(n-1, avg) // in case n is greater than vag
OPT(n, avg) = x_n + OPT(n-1, avg-x_n)

FIND_SUBSETS (x_1..x_n)
	sum = 0;
	For int i = 1..n
		sum += x_i
	EndFor
	avg = floor(sum/n) 
    S1 = {}
    S2 = {}
    For int i = 1..n
    	If (x_i >= avg)
    	    S2 = S2 U {x_i}
    	Else 
    		S1 = S1 U {x_i}
    		avg = avg - x_i
    	EndIf
    EndFor
    Return S1, S2

avg = 6
0 1 2 3 2 1 0 1 3 
    S1 = {}
    S2 = {}
    avg = 6
i = 1
	S1 = {0}
	avg = 6
i = 2
	S1 = {0, 1}
	avg = 5
i = 3
	S1 = {0, 1, 2}
	avg = 3
i = 4
	S1 = {0, 1, 2, 3}
	avg = 0
i = 5
	S1 = {0, 1, 2, 3}
	S2 = {2}
i = 6
	S1 = {0, 1, 2, 3}
	S2 = {2, 1}
i = 7..8..9
	S1 = {0, 1, 2, 3, 0} - 6
	S2 = {2, 1, 1, 3}    - 7 correct!
	
